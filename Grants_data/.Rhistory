distr1 <- my_na_rm(x = distr1)
hist(distr1)
my_na_rm(x = c("2", "3", NA))
my_na_rm <- function(x){
if (is.numeric(x)){
x[is.na(x)] <- mean(x, na.rm = T)
return(x)
}
else {
print("X is not numeric")
}
}
my_na_rm(x = c("2", "3", NA))
my_na_rm <- function(x){
if (is.numeric(x)){
stat_test <- shapiro.test(x)
if (stat_test$p.value > 0.05) {
x[is.na(x)] <- mean(x, na.rm = T)
}
else {
x[is.na(x)] <- median(x, na.rm = T)
}
return(x)
}
else {
print("X is not numeric")
}
}
distr1 <- rnorm(1000)
distr1[1:30] <- NA
my_na_rm(distr1)
distr1 <- my_na_rm(distr1)
my_na_rm <- function(x){
if (is.numeric(x)){
stat_test <- shapiro.test(x)
if (stat_test$p.value > 0.05) {
x[is.na(x)] <- mean(x, na.rm = T)
print("NA values were replaced with mean")
}
else {
x[is.na(x)] <- median(x, na.rm = T)
print("NA values were replaced with median")
}
return(x)
}
else {
print("X is not numeric")
}
}
d1 <- rnorm(2000)
d2 <- runif(2000)
d1[1:10] <- NA
d2[1:10] <- NA
d1 <- my_na_rm(d1)
head(d1)
d2 <- my_na_rm(d2)
hist(d2)
source("my_na_rm.R")
d1 <- rnorm(2000)
NA.position <- function(x){
s <- which(is.na(x))
return(s)
}
task1 <- rnorm(10)
task1[2,4,8] <- NA
task1[c(2,4,8)] <- NA
NA.position(task1)
NA.counter <- function(x){
if (is.na(x)){
print("x is not a number")
}
else {
s <- length(NA.position(x))
return(s)
}
}
NA.counter(task1)
NA.counter <- function(x){
if (is.numeric(x)){
print("x is not a number")
}
else {
s <- length(NA.position(x))
return(s)
}
}
NA.counter(task1)
NA.counter <- function(x){
if (is.numeric(x)){
print("Argument is not a number")
}
else {
s <- length(NA.position(x))
return(s)
}
}
NA.counter <- function(x){
s <- length(NA.position(x))
return(s)
}
NA.counter(task1)
NA.counter <- function(x){
s <- length(which(is.na(x))
return(s)
}
NA.counter <- function(x){
s <- length(which(is.na(x))
return(s)
}
NA.counter <- function(x)
s <- lenght(which(is.na(x)))
NA.counter <- function(x){
s <- lenght(which(is.na(x)))
return(s)
}
NA.counter(task1)
NA.counter <- function(x){
s <- length(which(is.na(x)))
return(s)
}
NA.counter(task1)
dir()
dir()
dir(pattern = "*.csv")
grants <- data.frame()
for (i in dir(pattern = "*.csv")){
temp_df <- read.csv(i)
grants <- rbind(temp_df, grants)
}
read_data <- function(){
df <- data.frame()
for (i in dir(pattern = "*.csv")){
temp_df <- read.csv(i)
df <- rbind(temp_df, df)
}
return(df)
}
read_data <- function(){
df <- data.frame()
for (i in dir(pattern = "*.csv")){
df1 <- read.csv(i)
df <- rbind(df1, df)
}
return(df)
}
grants2 <- read_data()
read_data <- function(){
df <- data.frame()
number <- 0
for (i in dir(pattern = "*.csv")){
df1 <- read.csv(i)
df <- rbind(df1, df)
number <- number + 1
}
print(paste(as.character(number), "files were combined"))
return(df)
}
grants2 <- read_data()
read_data <- function(){
df <- data.frame()
number <- 0
for (i in dir(pattern = "*.csv")){
df1 <- read.csv(i)
df <- rbind(df1, df)
number <- number + 1
}
print(paste(as.character(number), "files were combined"))
return(df)
}
grants2 <- read_data()
setwd(as.character("C:/Users/miffka/Documents/!DataMining/RAnalysis1/Grants_data")
setwd(as.character("C:/Users/miffka/Documents/!DataMining/RAnalysis1/Grants_data"))
setwd(as.character("C:/Users/miffka/Documents/!DataMining/RAnalysis1/Grants_data"))
read_data <- function(){
df <- data.frame()
number <- 0
for (i in dir(pattern = "*.csv")){
df1 <- read.csv(i)
df <- rbind(df1, df)
number <- number + 1
}
print(paste(as.character(number), "files were combined"))
return(df)
}
grants2 <- read_data()
read_data <- function(){
df <- data.frame()
number <<- 0
for (i in dir(pattern = "*.csv")){
df1 <- read.csv(i)
df <- rbind(df1, df)
number <<- number + 1
}
print(paste(as.character(number), "files were combined"))
return(df)
}
grants2 <- read_data()
number
filtered.sum <- function(x){
s <- sum(x[which(x > 0)])
}
filtered.sum(c(1, -2, 3, NA, NA))
filtered.sum(c(1, -2, 3, NA, NA))
filtered.sum <- function(x){
s <- sum(x, na.rm = T)
return(s)
}
filtered.sum(c(1, -2, 3, NA, NA))
filtered.sum <- function(x){
s <- sum(x[!which(is.na(x))], na.rm = T)
return(s)
}
filtered.sum(c(1, -2, 3, NA, NA))
filtered.sum <- function(x){
s <- sum(x[which(x > 0)], na.rm = T)
return(s)
}
filtered.sum(c(1, -2, 3, NA, NA))
task4 <- rnorm(100)
boxplot(task4)
summary(task4)
task41 <- summary(task4)
summary(boxplot(task4))
task41 <- summary(boxplot(task4))
task4 <- rnorm(100)
boxplot(task4)
summary(boxplot(task4))
quantile(task4)
task41 <- quantile(task4)
task41 <- quantile(task4, probs = c(0.25, 0.75))
IQR(task4)
task42 <- IQR(task4)
s <- which(x > 1.5 * IQR(x) * quantile(x, probs = 0.75) || x < 1.5 * IQR(x) * quantile(x, probs = 0.25))
x <- rnorm(1000)
s <- which(x > 1.5 * IQR(x) * quantile(x, probs = 0.75) || x < 1.5 * IQR(x) * quantile(x, probs = 0.25))
boxplot(x)
s <- which(x > 1.5 * IQR(x) * quantile(x, probs = 0.75) || x < 1.5 * IQR(x) * quantile(x, probs = 0.25))
task4 <- rnorm(100)
boxplot(task4)
task41 <- quantile(task4, probs = c(0.25, 0.75))
task42 <- IQR(task4)
task43 <-
outliers.rm <- function(x){
}
task4 <- rnorm(100)
boxplot(task4)
task41 <- quantile(task4, probs = c(0.25, 0.75))
task42 <- IQR(task4)
task43 <- which(task4 < quantile(task4, probs = 0.25))
boxplot(task4)
task43 <- which(task4 < 1.5 * quantile(task4, probs = 0.25))
task43 <- which(task4 < 1.5 * IQR(task4) * quantile(task4, probs = 0.25))
task43
task44 <- which(task4 > 1.5 * IQR(task4) * quantile(task4, probs = 0.75))
task4 <- rnorm(100)
task4 <- rnorm(100)
boxplot(task4)
task41 <- quantile(task4, probs = c(0.25, 0.75))
task42 <- IQR(task4)
task43 <- which(task4 < 1.5 * IQR(task4) * quantile(task4, probs = 0.25))
task44 <- which(task4 > 1.5 * IQR(task4) * quantile(task4, probs = 0.75))
task4 <- task4[!task43]
task4 <- rnorm(100)
boxplot(task4)
task41 <- quantile(task4, probs = c(0.25, 0.75))
task42 <- IQR(task4)
#сначала пропишем все вне функции
task43 <- which(task4 < 1.5 * IQR(task4) * quantile(task4, probs = 0.25))
task44 <- which(task4 > 1.5 * IQR(task4) * quantile(task4, probs = 0.75))
task4 <- task4[!task4 %in% task43]
task4 <- setdiff(task4, task43)
task4 <- task[!c(task43)]
task4 <- setdiff(task4, task4[task43])
task43 <- task4(which(task4 < 1.5 * IQR(task4) * quantile(task4, probs = 0.25)))
task43 <- task4[which(task4 < 1.5 * IQR(task4) * quantile(task4, probs = 0.25))]
task4 <- setdiff(task4, task43)
task4 <- rnorm(100)
boxplot(task4)
task41 <- quantile(task4, probs = c(0.25, 0.75))
task42 <- IQR(task4)
#сначала пропишем все вне функции
task43 <- task4[which(task4 < 1.5 * IQR(task4) * quantile(task4, probs = 0.25))]
task44 <- which(task4 > 1.5 * IQR(task4) * quantile(task4, probs = 0.75))
task4 <- setdiff(task4, task43)
task44 <- task4[which(task4 > 1.5 * IQR(task4) * quantile(task4, probs = 0.75))]
task4 <- rnorm(100)
boxplot(task4)
task41 <- quantile(task4, probs = c(0.25, 0.75))
task42 <- IQR(task4)
#сначала пропишем все вне функции
task43 <- task4[which(task4 < 1.5 * IQR(task4) * quantile(task4, probs = 0.25))]
task44 <- task4[which(task4 > 1.5 * IQR(task4) * quantile(task4, probs = 0.75))]
task4 <- setdiff(task4, task43)
task4 <- setdiff(task4, task44)
outliers.rm <- function(x){
task43 <- x[which(x < 1.5 * IQR(x) * quantile(x, probs = 0.25))]
task44 <- x[which(x > 1.5 * IQR(x) * quantile(x, probs = 0.75))]
x <- setdiff(x, task43)
x <- setdiff(x, task44)
return(x)
}
task4 <- rnorm(100)
boxplot(task4)
outliers.rm(task4)
task4 <- outliers.rm(task4)
ggplot(task4, aes(task4))+
geom_boxplot()
boxplot(task4)
task4 <- rnorm(100)
boxplot(task4)
task4 <- rnorm(100)
boxplot(task4)
outliers.rm <- function(x){
task43 <- x[which(x < 1.5 * IQR(x) * quantile(x, probs = 0.25))]
task44 <- x[which(x > 1.5 * IQR(x) * quantile(x, probs = 0.75))]
x <- setdiff(x, task43)
x <- setdiff(x, task44)
return(x)
}
task4 <- outliers.rm(task4)
boxplot(task4)
?setdiff
outliers.rm <- function(x){
task43 <- x[which(x < 1.5 * IQR(x) * quantile(x, probs = 0.25))]
task44 <- x[which(x > 1.5 * IQR(x) * quantile(x, probs = 0.75))]
x <- x[!task43 && !task44]
return(x)
}
task4 <- rnorm(100)
boxplot(task4)
task4 <- outliers.rm(task4)
task43 <- task4[which(task4 < 1.5 * IQR(task4) * quantile(task4, probs = 0.25))]
task44 <- task4[which(task4 > 1.5 * IQR(task4) * quantile(task4, probs = 0.75))]
t1 <- c(0.45, 0.56, -2.23, 2.26, -0.48, 1.45, 0.21, -0.45, 0.19, 67.63, 2.79, -0.51, 0.41, -0.11, -1.87, 0.33, 2.55, -3.94, 4.51, 0.11, 0.25, -0.94, -0.54, -0.84, 1.46, -0.46, -2.45, 0.72, -3.41, 1.49)
t2 <- c(0.45, 0.56, -2.23, 2.26, -0.48, 1.45, 0.21, -0.45, 0.19, 2.79, -0.51, 0.41, -0.11, -1.87, 0.33, 2.55, 0.11, 0.25, -0.94, -0.54, -0.84, 1.46, -0.46, -2.45, 0.72, 1.49)
which(t1 == t2)
task4 <- rnorm(100)
boxplot(task4)
exclude_val <- function(full_vector,searched_vector){
found=c()
for(i in full_vector){
if(any(is.element(searched_vector,i))){
searched_vector[(which(searched_vector==i))[1]]=NA
}
else{
found=c(found,i)
}
}
return(found)
}
task43 <- x[which(x < 1.5 * IQR(x) * quantile(x, probs = 0.25))]
task44 <- x[which(x > 1.5 * IQR(x) * quantile(x, probs = 0.75))]
task43 <- task4[which(task4 < 1.5 * IQR(task4) * quantile(task4, probs = 0.25))]
task44 <- task4[which(task4 > 1.5 * IQR(task4) * quantile(task4, probs = 0.75))]
task45 <- task43 + task44
task45 <- cbind(task43, task44)
task45 <- append(task43, task44)
task4 <- exclude_val(task4, task45)
outliers.rm <- function(x){
task43 <- x[which(x < 1.5 * IQR(x) * quantile(x, probs = 0.25))]
task44 <- x[which(x > 1.5 * IQR(x) * quantile(x, probs = 0.75))]
task45 <- append(task43, task44)
x <- exclude_val(x, task45)
return(x)
}
t1 <- c(1.34, 0.32, -11.57, 0.32, 0.31, 23.03, 0.14, -1.28, 1.5, -3.01, 1.43, 0.8, 0.32, 0.78, -2.44, 0.28, -3.5, -0.39, -0.18, -0.02, -0.76, 0.42, -2.74, -0.75, -0.98, -60.76, 0.33, 41.99, -1.12, -3.92)
t2 <- c(1.34, 0.32, 0.32, 0.31, 0.14, -1.28, 1.5, -3.01, 1.43, 0.8, 0.32, 0.78, -2.44, 0.28, -3.5, -0.39, -0.18, -0.02, -0.76, 0.42, -2.74, -0.75, -0.98, 0.33, -1.12)
boxplot(t1)
boxplot(t2)
t3 <- c(0.32, 0.32, 0.31, 0.14, -1.28, -3.01, 0.8, 0.32, 0.78, -2.44, 0.28, -0.39, -0.18, -0.02, -0.76, 0.42, -2.74, -0.75, -0.98, 0.33, -1.12)
boxplot(t3)
boxplot(t1)
boxplot(t2)
histogram(t1)
histogram(t2)
histogram(t3)
histogram(t2)
histogram(t3)
histogram(t2)
task4 > 1.5 * IQR(task4) * quantile(task4, probs = 0.75)
outliers.rm <- function(x){
task43 <- x[x < 1.5 * IQR(x) * quantile(x, probs = 0.25)]
task44 <- x[x > 1.5 * IQR(x) * quantile(x, probs = 0.75)]
task45 <- append(task43, task44)
x <- exclude_val(x, task45)
return(x)
}
task43 <- x[x < 1.5 * IQR(x) * quantile(x, probs = 0.25)]
task44 <- x[x > 1.5 * IQR(x) * quantile(x, probs = 0.75)]
task45 <- append(task43, task44)
x <- rnorm(100)
task43 <- x[x < 1.5 * IQR(x) * quantile(x, probs = 0.25)]
task44 <- x[x > 1.5 * IQR(x) * quantile(x, probs = 0.75)]
task45 <- append(task43, task44)
x <- rnorm(100)
task43 <- c(x < 1.5 * IQR(x) * quantile(x, probs = 0.25))
task44 <- c(x > 1.5 * IQR(x) * quantile(x, probs = 0.75))
task45 <- append(task43, task44)
task45 <- task43 + task44
task45 <- as.logical(task43 + task44)
outliers.rm <- function(x){
task43 <- c(x < 1.5 * IQR(x) * quantile(x, probs = 0.25))
task44 <- c(x > 1.5 * IQR(x) * quantile(x, probs = 0.75))
task45 <- as.logical(task43 + task44)
x <- x[task45]
return(x)
}
outlier(t1)
outliers.rm <- function(x){
task43 <- c(x < 1.5 * IQR(x) * quantile(x, probs = 0.25))
task44 <- c(x > 1.5 * IQR(x) * quantile(x, probs = 0.75))
task45 <- as.logical(task43 + task44)
x <- x[task45]
return(x)
}
x <- rnorm(100)
task43 <- c(x < 1.5 * IQR(x) * quantile(x, probs = 0.25))
task44 <- c(x > 1.5 * IQR(x) * quantile(x, probs = 0.75))
task45 <- as.logical(task43 + task44)
x[task45]
x[!task45]
outliers.rm <- function(x){
task43 <- c(x < 1.5 * IQR(x) * quantile(x, probs = 0.25))
task44 <- c(x > 1.5 * IQR(x) * quantile(x, probs = 0.75))
task45 <- as.logical(task43 + task44)
x <- x[!task45]
return(x)
}
outliers.rm <- function(x){
task43 <- c(x < 1.5 * IQR(x) * quantile(x, probs = 0.25))
task44 <- c(x > 1.5 * IQR(x) * quantile(x, probs = 0.75))
task45 <- as.logical(task43 + task44)
x <- x[!task45]
return(x)
}
outlier(t1)
t1 <- c(1.34, 0.32, -11.57, 0.32, 0.31, 23.03, 0.14, -1.28, 1.5, -3.01, 1.43, 0.8, 0.32, 0.78, -2.44, 0.28, -3.5, -0.39, -0.18, -0.02, -0.76, 0.42, -2.74, -0.75, -0.98, -60.76, 0.33, 41.99, -1.12, -3.92)
t2 <- c(1.34, 0.32, 0.32, 0.31, 0.14, -1.28, 1.5, -3.01, 1.43, 0.8, 0.32, 0.78, -2.44, 0.28, -3.5, -0.39, -0.18, -0.02, -0.76, 0.42, -2.74, -0.75, -0.98, 0.33, -1.12)
t2 == outlier(t1)
outlier(t1)
x <- rnorm(100)
task43 <- c(x < 1.5 * IQR(x) * quantile(x, probs = 0.25))
task44 <- c(x > 1.5 * IQR(x) * quantile(x, probs = 0.75))
task45 <- as.logical(task43 + task44)
x[!task45]
outliers.rm <- function(x){
task43 <- c(x <= 1.5 * IQR(x) * quantile(x, probs = 0.25))
task44 <- c(x >= 1.5 * IQR(x) * quantile(x, probs = 0.75))
task45 <- as.logical(task43 + task44)
x <- x[!task45]
return(x)
}
outliers.rm <- function(x){
y <- IQR(x)
k <- quantile(x, probs = 0.25)
l <- quantile(x,probs = 0.75)
task43 <- c(x < 1.5 * y * k)
task44 <- c(x > 1.5 * y * l)
task45 <- as.logical(task43 + task44)
x <- x[!task45]
return(x)
}
outliers.rm <- function(x){
y <- IQR(x)
k <- 1.5*quantile(x, probs = 0.25)
l <- 1.5*quantile(x,probs = 0.75)
task43 <- c(x < y * k)
task44 <- c(x > y * l)
task45 <- as.logical(task43 + task44)
x <- x[!task45]
return(x)
}
#это исходный вектор
t1 <- c(1.34, 0.32, -11.57, 0.32, 0.31, 23.03, 0.14, -1.28, 1.5, -3.01, 1.43, 0.8, 0.32, 0.78, -2.44, 0.28, -3.5, -0.39, -0.18, -0.02, -0.76, 0.42, -2.74, -0.75, -0.98, -60.76, 0.33, 41.99, -1.12, -3.92)
#это правильный ответ
t2 <- c(1.34, 0.32, 0.32, 0.31, 0.14, -1.28, 1.5, -3.01, 1.43, 0.8, 0.32, 0.78, -2.44, 0.28, -3.5, -0.39, -0.18, -0.02, -0.76, 0.42, -2.74, -0.75, -0.98, 0.33, -1.12)
#это мой ответ
t3 <- c(0.32, 0.32, 0.31, 0.14, -1.28, -3.01, 0.8, 0.32, 0.78, -2.44, 0.28, -0.39, -0.18, -0.02, -0.76, 0.42, -2.74, -0.75, -0.98, 0.33, -1.12)
summary(t1)
outliers.rm <- function(x){
y <- IQR(x)
k <- y * 1.5 * quantile(x, probs = 0.25)
l <- y * 1.5*quantile(x, probs = 0.75)
task43 <- c(x < k)
task44 <- c(x > l)
task45 <- as.logical(task43 + task44)
x <- x[!task45]
return(x)
}
task43 <- c(x < 1.5 * IQR(x) * quantile(x, probs = 0.25))
task44 <- c(x > 1.5 * IQR(x) * quantile(x, probs = 0.75))
task45 <- as.logical(task43 + task44)
x[!task45]
x <- rnorm(100)
task43 <- c(x < 1.5 * IQR(x) * quantile(x, probs = 0.25))
task44 <- c(x > 1.5 * IQR(x) * quantile(x, probs = 0.75))
task45 <- as.logical(task43 + task44)
x1 <- x[!task45]
outliers.rm <- function(x){
y <- IQR(x)
k <- quantile(x, probs = 0.25) - y * 1.5
l <- y * 1.5 + quantile(x, probs = 0.75)
task43 <- c(x < k)
task44 <- c(x > l)
task45 <- as.logical(task43 + task44)
x <- x[!task45]
return(x)
}
outliers.rm <- function(x){
q <- quantile(x, 0.25) + quantile(x, 0.75)
return(x[abs(x - q/2) <= 2*IQR(x)])
}
